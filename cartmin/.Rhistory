reduce(list(data_two, data_short, data_no_short, data_friend, data_bvsp), left_join(by = date))
?left_join
reduce(list(data_two, data_short, data_no_short, data_friend, data_bvsp), left_join(by = c('date')))
reduce(list(data_two, data_short, data_no_short, data_friend, data_bvsp), ~left_join(by = c(., 'date')))
reduce(list(data_two, data_short, data_no_short, data_friend, data_bvsp), ~left_join(by = c(., by = 'date')))
data_bvsp
data_friend
reduce(list(data_two, data_short, data_no_short, data_friend, data_bvsp), bind_cols)
reduce(list(data_two, data_short, data_no_short, data_friend, data_bvsp), bind_cols) %>%
select(starts_with("date"))
reduce(list(data_two, data_short, data_no_short, data_friend, data_bvsp), bind_cols) %>%
select(date...1, -starts_with("date"))
reduce(list(data_two, data_short, data_no_short, data_friend, data_bvsp), bind_cols) %>%
select(-starts_with("date"), date...1)
reduce(list(data_two, data_short, data_no_short, data_friend, data_bvsp), bind_cols) %>%
select(-starts_with("date"), date...1, starts_with("result"))
reduce(list(data_two, data_short, data_no_short, data_friend, data_bvsp), bind_cols) %>%
select(-starts_with("date"), date...1)
reduce(list(data_two, data_short, data_no_short, data_friend, data_bvsp), bind_cols) %>%
select(-starts_with("date"), date...1) %>%
set_names(., nm = c("dois", "short", "no-short", "friend", "bvsp"))
reduce(list(data_two, data_short, data_no_short, data_friend, data_bvsp), bind_cols) %>%
select(-starts_with("date"), date...1) %>%
set_names(., nm = c("dois", "short", "no-short", "friend", "bvsp", "date"))
final <- reduce(list(data_two, data_short, data_no_short, data_friend, data_bvsp), bind_cols) %>%
select(-starts_with("date"), date...1) %>%
set_names(., nm = c("dois", "short", "no-short", "friend", "bvsp", "date"))
?pivot_longer
final <- reduce(list(data_two, data_short, data_no_short, data_friend, data_bvsp), bind_cols) %>%
select(-starts_with("date"), date...1) %>%
set_names(., nm = c("dois", "short", "no-short", "friend", "bvsp", "date")) %>%
pivot_longer(cols = -date, names_to = "series")
final
final %>%
ggplot(aes(x = date)) +
geom_line(aes(y = series, color = series))
final %>%
ggplot(aes(x = date)) +
geom_line(aes(y = value, color = series))
final %>%
ggplot(aes(x = date)) +
geom_line(aes(y = value, color = series)) +
scale_y_continuous(labels = scales::percent())
scale_y_continuous(labels = scales::percent
final %>%
ggplot(aes(x = date)) +
geom_line(aes(y = value, color = series)) +
scale_y_continuous(labels = scales::percent)
labs(y = "Resultado acumulado (%)",
x = "Data")
final %>%
ggplot(aes(x = date)) +
geom_line(aes(y = value, color = series)) +
scale_y_continuous(labels = scales::percent) +
scale_fill_discrete(name = "Benchmark", labels = c("Ibovespa", "2 ativos", "Carteira amigo", "9 ativos", "9 ativos sem venda")) +
labs(y = "Resultado acumulado (%)",
x = "Data")
final %>%
ggplot(aes(x = date)) +
geom_line(aes(y = value, color = series)) +
scale_y_continuous(labels = scales::percent) +
scale_fill_discrete(name = "Benchmark", labels = c("Ibovespa", "2 ativos", "Carteira amigo", "9 ativos", "9 ativos sem venda")) +
labs(y = "Resultado acumulado (%)",
x = "Data")
final %>%
ggplot(aes(x = date)) +
geom_line(aes(y = value, color = series)) +
scale_y_continuous(labels = scales::percent) +
scale_color_discrete(name = "Benchmark", labels = c("Ibovespa", "2 ativos", "Carteira amigo", "9 ativos", "9 ativos sem venda")) +
labs(y = "Resultado acumulado (%)",
x = "Data")
final %>%
ggplot(aes(x = date)) +
geom_line(aes(y = value, color = series)) +
scale_y_continuous(labels = scales::percent) +
labs(y = "Resultado acumulado (%)",
x = "Data")
final %>%
ggplot(aes(x = date)) +
geom_line(aes(y = value, color = series)) +
scale_y_continuous(labels = scales::percent) +
scale_color_discrete(name = "Benchmark", labels = c("Ibovespa", "2 ativos", "Carteira amigo", "9 ativos sem venda", "9 ativos")) +
labs(y = "Resultado acumulado (%)",
x = "Data")
getwd()
list.files()
library(quantmod)
library(tidyverse)
library(broom)
# objeto com o nome dos ativos
tickers <- c("PSSA3.SA", "ITUB3.SA")
# baixando os dados e calculando os retornos aritméticos diários
getSymbols(tickers, from = "2020-02-02", to ="2020-10-31")
x <- dailyReturn(get(tickers[1]))
y <- dailyReturn(get(tickers[2]))
returns <- tidy(merge(x, y)) %>%
pivot_wider(names_from = series, values_from = value) %>%
set_names(., nm = c("date", tickers))
returns
theme_set(theme_minimal())
returns %>%
ggplot(aes(x = PSSA3.SA, y = ITUB3.SA)) +
geom_point()
min_var_1 <- function(data){
data <- data[, -1]
x <- pull(data, 1)  #dplyr::pull extrai a coluna como vetor
y <- pull(data, 2)
alpha <- (var(y) - cov(x, y)) / (var(x) + var(y) - 2*cov(x, y))
return(alpha)
}
# aplicando a função nos nossos dados
min_var_1(returns)
# definindo nome das ações
tickers <- c("RAIL3.SA", "WEGE3.SA", "ITUB3.SA", "PSSA3.SA", "KLBN3.SA", "CVCB3.SA", "TOTS3.SA", "IRBR3.SA", "SQIA3.SA")
# extraindo os dados
getSymbols(tickers, from = "2020-02-02", to ="2020-10-31")
# criando um objeto que contenha só os retornos e as datas
data <- map(tickers, ~get(.x)) %>%
tibble %>%
mutate(returns = map(., ~dailyReturn(.x))) %>%
.$returns %>%
reduce(., merge) %>%
tidy %>%
pivot_wider(names_from = series, values_from = value) %>%
set_names(., c("date", tickers))
# removendo os objetos criados por getSymbols()
data
corrplot::corrplot(cor(data[, -1]), type = "upper")
min_var_2 <- function(data){
i <- rep(1, ncol(data)-1)
inverse_cov <- solve(cov(data[,-1]))
weights <- (i%*% inverse_cov) / as.numeric(i %*% inverse_cov %*% i)
return(weights)
}
min_var_2(data)
library(quadprog)
i <- rep(1, ncol(data)-1)
column_number <- ncol(data[,-1])
cov_mat <- cov(data[, -1])
a_mat <- cbind(i, diag(1, ncol = column_number, nrow = column_number))
b <- c(1, rep(0, column_number))
weights <- solve.QP(Dmat = 2*cov_mat, Amat = a_mat, dvec = rep(0, column_number), bvec = b, meq = 1)$solution
names(weights) <- tickers
round(weights, digits = 6)
# dados do ibovespa
getSymbols("^BVSP", from = "2020-02-02", to ="2020-10-31")
# gerando resultados da carteira de dois ativos
alpha <- min_var_1(returns)
data_two <- returns %>%
mutate(weighted = 1 + alpha * PSSA3.SA + (1-alpha) * ITUB3.SA,
result = cumprod(weighted)-1) %>%
select(date, result)
# gerando resultados da carteira de 10 ativos com a opção de se operar vendido
weight_vector <- min_var_2(data)
data_short <- data %>%
mutate(weighted = pmap(data[, - 1], ~c(...)) %>%
map_dbl(function(x) 1 + (x %*% t(weight_vector))),
result = cumprod(weighted)-1
) %>%
select(date, result)
data_no_short <-  data %>%
mutate(weighted = pmap(data[, - 1], ~c(...)) %>%
map_dbl(function(x) 1 + (x %*% (weights))),
result = cumprod(weighted)-1
) %>%
select(date, result)
# carteira do nosso amigo
more_weights <- c(0.1041, 0.2091, 0.1291, 0.1043, 0.726, 0.763, .449, 0.2371, 0.225)
data_friend <- data %>%
mutate(weighted = pmap(data[, - 1], ~c(...)) %>%
map_dbl(function(x) 1 + (x %*% (more_weights))),
result = cumprod(weighted)-1
) %>%
select(date, result)
# gerando os resultados do ibov
data_bvsp <- dailyReturn(BVSP) %>%
tidy %>%
mutate(result = cumprod(1 + value) - 1) %>%
select(date = index, result)
# criando tabela com todos os ret
final <- reduce(list(data_two, data_short, data_no_short, data_friend, data_bvsp), bind_cols) %>%
select(-starts_with("date"), date...1) %>%
set_names(., nm = c("amigo", "vendido", "sem", "friend", "bvsp", "date")) %>%
pivot_longer(cols = -date, names_to = "series")
final %>%
ggplot(aes(x = date)) +
geom_line(aes(y = value, color = series)) +
scale_y_continuous(labels = scales::percent) +
scale_color_discrete(name = "Benchmark", labels = c("Ibovespa", "2 ativos", "Carteira amigo", "9 ativos sem venda", "9 ativos")) +
labs(y = "Resultado acumulado (%)",
x = "Data")
library(quadprog)
i <- rep(1, ncol(data)-1)
column_number <- ncol(data[,-1])
cov_mat <- cov(data[, -1])
a_mat <- cbind(i, diag(1, ncol = column_number, nrow = column_number))
b <- c(1, rep(0, column_number))
weights <- solve.QP(Dmat = 2*cov_mat, Amat = a_mat, dvec = rep(0, column_number), bvec = b, meq = 1)$solution
names(weights) <- tickers
round(weights, digits = 6)
library(quantmod)
library(tidyverse)
library(broom)
# objeto com o nome dos ativos
tickers <- c("PSSA3.SA", "ITUB3.SA")
# baixando os dados e calculando os retornos aritméticos diários
suppressMessages(getSymbols(tickers, from = "2020-02-02", to ="2020-10-31"))
x <- dailyReturn(get(tickers[1]))
library(quantmod)
library(tidyverse)
library(broom)
# objeto com o nome dos ativos
tickers <- c("PSSA3.SA", "ITUB3.SA")
# baixando os dados e calculando os retornos aritméticos diários
suppressMessages(getSymbols(tickers, from = "2020-02-02", to ="2020-10-31"))
library(quantmod)
library(tidyverse)
library(broom)
# objeto com o nome dos ativos
tickers <- c("PSSA3.SA", "ITUB3.SA")
# baixando os dados e calculando os retornos aritméticos diários
suppressMessages(getSymbols(tickers, from = "2020-02-02", to ="2020-10-31"))
x <- dailyReturn(get(tickers[1]))
y <- dailyReturn(get(tickers[2]))
returns <- tidy(merge(x, y)) %>%
pivot_wider(names_from = series, values_from = value) %>%
set_names(., nm = c("date", tickers))
returns
theme_set(theme_minimal())
returns %>%
ggplot(aes(x = PSSA3.SA, y = ITUB3.SA)) +
geom_point()
min_var_1 <- function(data){
data <- data[, -1]
x <- pull(data, 1)  #dplyr::pull extrai a coluna como vetor
y <- pull(data, 2)
alpha <- (var(y) - cov(x, y)) / (var(x) + var(y) - 2*cov(x, y))
return(alpha)
}
# aplicando a função nos nossos dados
min_var_1(returns)
# definindo nome das ações
tickers <- c("RAIL3.SA", "WEGE3.SA", "ITUB3.SA", "PSSA3.SA", "KLBN3.SA", "CVCB3.SA", "TOTS3.SA", "IRBR3.SA", "SQIA3.SA")
# extraindo os dados
supressMessages(getSymbols(tickers, from = "2020-02-02", to ="2020-10-31"))
library(quantmod)
library(tidyverse)
library(broom)
# objeto com o nome dos ativos
tickers <- c("PSSA3.SA", "ITUB3.SA")
# baixando os dados e calculando os retornos aritméticos diários
suppressMessages(getSymbols(tickers, from = "2020-02-02", to ="2020-10-31"))
x <- dailyReturn(get(tickers[1]))
y <- dailyReturn(get(tickers[2]))
returns <- tidy(merge(x, y)) %>%
pivot_wider(names_from = series, values_from = value) %>%
set_names(., nm = c("date", tickers))
returns
theme_set(theme_minimal())
returns %>%
ggplot(aes(x = PSSA3.SA, y = ITUB3.SA)) +
geom_point()
min_var_1 <- function(data){
data <- data[, -1]
x <- pull(data, 1)  #dplyr::pull extrai a coluna como vetor
y <- pull(data, 2)
alpha <- (var(y) - cov(x, y)) / (var(x) + var(y) - 2*cov(x, y))
return(alpha)
}
# aplicando a função nos nossos dados
min_var_1(returns)
# definindo nome das ações
tickers <- c("RAIL3.SA", "WEGE3.SA", "ITUB3.SA", "PSSA3.SA", "KLBN3.SA", "CVCB3.SA", "TOTS3.SA", "IRBR3.SA", "SQIA3.SA")
# extraindo os dados
suppressMessages(getSymbols(tickers, from = "2020-02-02", to ="2020-10-31"))
# criando um objeto que contenha só os retornos e as datas
data <- map(tickers, ~get(.x)) %>%
tibble %>%
mutate(returns = map(., ~dailyReturn(.x))) %>%
.$returns %>%
reduce(., merge) %>%
tidy %>%
pivot_wider(names_from = series, values_from = value) %>%
set_names(., c("date", tickers))
data
corrplot::corrplot(cor(data[, -1]), type = "upper")
min_var_2 <- function(data){
i <- rep(1, ncol(data)-1)
inverse_cov <- solve(cov(data[,-1]))
weights <- (i%*% inverse_cov) / as.numeric(i %*% inverse_cov %*% i)
return(weights)
}
min_var_2(data)
library(quadprog)
i <- rep(1, ncol(data)-1)
column_number <- ncol(data[,-1])
cov_mat <- cov(data[, -1])
a_mat <- cbind(i, diag(1, ncol = column_number, nrow = column_number))
b <- c(1, rep(0, column_number))
weights <- solve.QP(Dmat = 2*cov_mat, Amat = a_mat, dvec = rep(0, column_number), bvec = b, meq = 1)$solution
names(weights) <- tickers
round(weights, digits = 6)
# dados do ibovespa
supressMessages(getSymbols("^BVSP", from = "2020-02-02", to ="2020-10-31"))
library(quantmod)
library(tidyverse)
library(broom)
# objeto com o nome dos ativos
tickers <- c("PSSA3.SA", "ITUB3.SA")
# baixando os dados e calculando os retornos aritméticos diários
getSymbols(tickers, from = "2020-02-02", to ="2020-10-31", warnings = FALSE)
x <- suppressWarnings(dailyReturn(get(tickers[1])))
y <- suppressWarnings(dailyReturn(get(tickers[2])))
returns <- tidy(merge(x, y)) %>%
pivot_wider(names_from = series, values_from = value) %>%
set_names(., nm = c("date", tickers))
returns
theme_set(theme_minimal())
returns %>%
ggplot(aes(x = PSSA3.SA, y = ITUB3.SA)) +
geom_point()
min_var_1 <- function(data){
data <- data[, -1]
x <- pull(data, 1)  #dplyr::pull extrai a coluna como vetor
y <- pull(data, 2)
alpha <- (var(y) - cov(x, y)) / (var(x) + var(y) - 2*cov(x, y))
return(alpha)
}
# aplicando a função nos nossos dados
min_var_1(returns)
# definindo nome das ações
tickers <- c("RAIL3.SA", "WEGE3.SA", "ITUB3.SA", "PSSA3.SA", "KLBN3.SA", "CVCB3.SA", "TOTS3.SA", "IRBR3.SA", "SQIA3.SA")
# extraindo os dados
getSymbols(tickers, from = "2020-02-02", to ="2020-10-31", warnings = FALSE)
# criando um objeto que contenha só os retornos e as datas
data <- map(tickers, ~get(.x)) %>%
tibble %>%
mutate(returns = map(., ~dailyReturn(.x))) %>%
.$returns %>%
reduce(., merge) %>%
tidy %>%
pivot_wider(names_from = series, values_from = value) %>%
set_names(., c("date", tickers))
data
corrplot::corrplot(cor(data[, -1]), type = "upper")
min_var_2 <- function(data){
i <- rep(1, ncol(data)-1)
inverse_cov <- solve(cov(data[,-1]))
weights <- (i%*% inverse_cov) / as.numeric(i %*% inverse_cov %*% i)
return(weights)
}
min_var_2(data)
library(quadprog)
i <- rep(1, ncol(data)-1)
column_number <- ncol(data[,-1])
cov_mat <- cov(data[, -1])
a_mat <- cbind(i, diag(1, ncol = column_number, nrow = column_number))
b <- c(1, rep(0, column_number))
weights <- solve.QP(Dmat = 2*cov_mat, Amat = a_mat, dvec = rep(0, column_number), bvec = b, meq = 1)$solution
names(weights) <- tickers
round(weights, digits = 6)
# dados do ibovespa
getSymbols("^BVSP", from = "2020-02-02", to ="2020-10-31", warnings = FALSE)
# gerando resultados da carteira de dois ativos
alpha <- min_var_1(returns)
data_two <- returns %>%
mutate(weighted = 1 + alpha * PSSA3.SA + (1-alpha) * ITUB3.SA,
result = cumprod(weighted)-1) %>%
select(date, result)
# gerando resultados da carteira de 10 ativos com a opção de se operar vendido
weight_vector <- min_var_2(data)
data_short <- data %>%
mutate(weighted = pmap(data[, - 1], ~c(...)) %>%
map_dbl(function(x) 1 + (x %*% t(weight_vector))),
result = cumprod(weighted)-1
) %>%
select(date, result)
data_no_short <-  data %>%
mutate(weighted = pmap(data[, - 1], ~c(...)) %>%
map_dbl(function(x) 1 + (x %*% (weights))),
result = cumprod(weighted)-1
) %>%
select(date, result)
# carteira do nosso amigo
more_weights <- c(0.1041, 0.2091, 0.1291, 0.1043, 0.726, 0.763, .449, 0.2371, 0.225)
data_friend <- data %>%
mutate(weighted = pmap(data[, - 1], ~c(...)) %>%
map_dbl(function(x) 1 + (x %*% (more_weights))),
result = cumprod(weighted)-1
) %>%
select(date, result)
# gerando os resultados do ibov
data_bvsp <- dailyReturn(BVSP) %>%
tidy %>%
mutate(result = cumprod(1 + value) - 1) %>%
select(date = index, result)
# criando tabela com todos os ret
final <- reduce(list(data_two, data_short, data_no_short, data_friend, data_bvsp), bind_cols) %>%
select(-starts_with("date"), date...1) %>%
set_names(., nm = c("amigo", "vendido", "sem", "friend", "bvsp", "date")) %>%
pivot_longer(cols = -date, names_to = "series")
final %>%
ggplot(aes(x = date)) +
geom_line(aes(y = value, color = series)) +
scale_y_continuous(labels = scales::percent) +
scale_color_discrete(name = "Benchmark", labels = c("Ibovespa", "2 ativos", "Carteira amigo", "9 ativos sem venda", "9 ativos")) +
labs(y = "Resultado acumulado (%)",
x = "Data")
library(quantmod)
library(tidyverse)
library(broom)
# objeto com o nome dos ativos
tickers <- c("PSSA3.SA", "ITUB3.SA")
# baixando os dados e calculando os retornos aritméticos diários
suppressWarnings(getSymbols(tickers, from = "2020-02-02", to ="2020-10-31", warnings = FALSE))
x <- suppressWarnings(dailyReturn(get(tickers[1])))
y <- suppressWarnings(dailyReturn(get(tickers[2])))
returns <- tidy(merge(x, y)) %>%
pivot_wider(names_from = series, values_from = value) %>%
set_names(., nm = c("date", tickers))
returns
theme_set(theme_minimal())
returns %>%
ggplot(aes(x = PSSA3.SA, y = ITUB3.SA)) +
geom_point()
min_var_1 <- function(data){
data <- data[, -1]
x <- pull(data, 1)  #dplyr::pull extrai a coluna como vetor
y <- pull(data, 2)
alpha <- (var(y) - cov(x, y)) / (var(x) + var(y) - 2*cov(x, y))
return(alpha)
}
# aplicando a função nos nossos dados
min_var_1(returns)
# definindo nome das ações
tickers <- c("RAIL3.SA", "WEGE3.SA", "ITUB3.SA", "PSSA3.SA", "KLBN3.SA", "CVCB3.SA", "TOTS3.SA", "IRBR3.SA", "SQIA3.SA")
# extraindo os dados
suppressWarnings(getSymbols(tickers, from = "2020-02-02", to ="2020-10-31", warnings = FALSE))
# criando um objeto que contenha só os retornos e as datas
data <- map(tickers, ~get(.x)) %>%
tibble %>%
mutate(returns = map(., ~dailyReturn(.x))) %>%
.$returns %>%
reduce(., merge) %>%
tidy %>%
pivot_wider(names_from = series, values_from = value) %>%
set_names(., c("date", tickers))
data
corrplot::corrplot(cor(data[, -1]), type = "upper")
min_var_2 <- function(data){
i <- rep(1, ncol(data)-1)
inverse_cov <- solve(cov(data[,-1]))
weights <- (i%*% inverse_cov) / as.numeric(i %*% inverse_cov %*% i)
return(weights)
}
min_var_2(data)
library(quadprog)
i <- rep(1, ncol(data)-1)
column_number <- ncol(data[,-1])
cov_mat <- cov(data[, -1])
a_mat <- cbind(i, diag(1, ncol = column_number, nrow = column_number))
b <- c(1, rep(0, column_number))
weights <- solve.QP(Dmat = 2*cov_mat, Amat = a_mat, dvec = rep(0, column_number), bvec = b, meq = 1)$solution
names(weights) <- tickers
round(weights, digits = 6)
# dados do ibovespa
suppressWarnings(getSymbols("^BVSP", from = "2020-02-02", to ="2020-10-31", warnings = FALSE))
# gerando resultados da carteira de dois ativos
alpha <- min_var_1(returns)
data_two <- returns %>%
mutate(weighted = 1 + alpha * PSSA3.SA + (1-alpha) * ITUB3.SA,
result = cumprod(weighted)-1) %>%
select(date, result)
# gerando resultados da carteira de 10 ativos com a opção de se operar vendido
weight_vector <- min_var_2(data)
data_short <- data %>%
mutate(weighted = pmap(data[, - 1], ~c(...)) %>%
map_dbl(function(x) 1 + (x %*% t(weight_vector))),
result = cumprod(weighted)-1
) %>%
select(date, result)
data_no_short <-  data %>%
mutate(weighted = pmap(data[, - 1], ~c(...)) %>%
map_dbl(function(x) 1 + (x %*% (weights))),
result = cumprod(weighted)-1
) %>%
select(date, result)
# carteira do nosso amigo
more_weights <- c(0.1041, 0.2091, 0.1291, 0.1043, 0.726, 0.763, .449, 0.2371, 0.225)
data_friend <- data %>%
mutate(weighted = pmap(data[, - 1], ~c(...)) %>%
map_dbl(function(x) 1 + (x %*% (more_weights))),
result = cumprod(weighted)-1
) %>%
select(date, result)
# gerando os resultados do ibov
data_bvsp <- dailyReturn(BVSP) %>%
tidy %>%
mutate(result = cumprod(1 + value) - 1) %>%
select(date = index, result)
# criando tabela com todos os ret
final <- reduce(list(data_two, data_short, data_no_short, data_friend, data_bvsp), bind_cols) %>%
select(-starts_with("date"), date...1) %>%
set_names(., nm = c("amigo", "vendido", "sem", "friend", "bvsp", "date")) %>%
pivot_longer(cols = -date, names_to = "series")
final %>%
ggplot(aes(x = date)) +
geom_line(aes(y = value, color = series)) +
scale_y_continuous(labels = scales::percent) +
scale_color_discrete(name = "Benchmark", labels = c("Ibovespa", "2 ativos", "Carteira amigo", "9 ativos sem venda", "9 ativos")) +
labs(y = "Resultado acumulado (%)",
x = "Data")
